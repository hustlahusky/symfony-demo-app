#!/bin/sh
set -e

extDir="$(php -d 'display_errors=stderr' -r 'echo ini_get("extension_dir");')"
cd "$extDir"

usage() {
    echo "usage: $0 [options] module-name [module-name ...]"
    echo "   ie: $0 gd mysqli"
    echo "       $0 pdo pdo_mysql"
    echo
    echo 'Possible values for module-name:'
    find -maxdepth 1 \
            -type f \
            -name '*.so' \
            -exec basename '{}' ';' \
        | sort \
        | xargs
    echo
    echo 'Some of the above modules are already compiled into PHP; please check'
    echo 'the output of "php -i" to see which modules are already loaded.'
}

opts="$(getopt -o 'h?' --long 'help:' -- "$@" || { usage >&2 && false; })"
eval set -- "$opts"

while true; do
    flag="$1"
    shift
    case "$flag" in
        --help|-h|'-?') usage && exit 0 ;;
        --) break ;;
        *)
            {
                echo "error: unknown flag: $flag"
                usage
            } >&2
            exit 1
            ;;
    esac
done

modules=
for module; do
    if [ -z "$module" ]; then
        continue
    fi
    if ! [ -f "$module" ] && ! [ -f "$module.so" ]; then
        echo >&2 "error: '$module' does not exist"
        echo >&2
        usage >&2
        exit 1
    fi
    modules="$modules $module"
done

if [ -z "$modules" ]; then
    usage >&2
    exit 1
fi

for module in $modules; do
    moduleFile="$module"
    if [ -f "$module.so" ] && ! [ -f "$module" ]; then
        moduleFile="$module.so"
    fi
    if readelf --wide --syms "$moduleFile" | grep -q ' zend_extension_entry$'; then
        # https://wiki.php.net/internals/extensions#loading_zend_extensions
        line="zend_extension=$module"
    else
        line="extension=$module"
    fi

    ext="$(basename "$module")"
    ext="${ext%.*}"
    if php -d 'display_errors=stderr' -r 'exit(extension_loaded("'"$ext"'") ? 0 : 1);'; then
        # this isn't perfect, but it's better than nothing
        # (for example, 'opcache.so' presents inside PHP as 'Zend OPcache', not 'opcache')
        echo >&2
        echo >&2 "warning: $ext ($module) is already loaded!"
        echo >&2
        continue
    fi

    ini="$PHP_INI_DIR/conf.d/docker-php-ext-$ext.ini"

    if test -f "$ini-disabled"; then
        mv "$ini-disabled" "$ini"
    fi

    if ! test -f "$ini"; then
        touch "$ini"
    fi

    if ! grep -qFx -e "$line" -e "$line.so" "$ini" 2>/dev/null; then
        echo "$line" | cat - "$ini" > "/tmp/docker-php-ext-$ext.ini"
        mv "/tmp/docker-php-ext-$ext.ini" "$ini"
    fi
done
